DAY 1
=====================================================================================================================================================================
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.
======================
class Solution {
    public void setZeroes(int[][] arr) {
         int n = arr.length;
        int m = arr[0].length;

        int row[] = new int[n];
        int col[] = new int[m];

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if( arr[i][j] ==0 )
                {
                   row[i]=1;
                   col[j]=1;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if( row[i]==1 )
            {
                for (int j = 0; j < m; j++) {
                    arr[i][j] = 0;
                }
            }
        }

        for (int j = 0; j < m; j++) {
            if( col[j]==1 )
            {
                for (int i = 0; i < n; i++) {
                    arr[i][j] = 0 ;
                }
            }
        }
    }
}

====================================================================================================================================================================

DAY 2
===================

PASCALS TRIANGLE
===================

class Solution {
    public List<List<Integer>> generate(int numRows) {
        // public List<List<Integer>> generate(int r) {
        // List<List<Integer>> list1 = new ArrayList<>();
        // ArrayList<Integer> last = new ArrayList<>();
        // for (int i = 0 ; i < r ; i++){
        //     ArrayList<Integer> inside = new ArrayList<>();
        //     for(int j = 0 ; j<=i ; j++){
        //         if(j==0 || j==i){
        //             inside.add(j,1);
        //         }
        //         else{
        //             inside.add(j,last.get(j) + last.get(j-1));
        //         }
        //     }
        //     last = inside;
        //     list1.add(i,inside);
        // }
        // return list1;

        List<List<Integer>> res=new ArrayList<List<Integer>>();
        List<Integer> row,pre=null;
        for(int i=0;i<numRows;++i)
        {
            row=new ArrayList<Integer>();
            for(int j=0;j<=i;++j)
            {
                if(j==0 || j==i)
                {
                    row.add(1);
                }
                else{
                row.add(pre.get(j-1)+pre.get(j));
                }
            }
                pre=row;
                res.add(row);
            
        }
            return res;
        
    }
}
=====================================================================================================================================================================
DAY 3
======
next permutations

class Solution {
    public void nextPermutation(int[] nums) {
        int in1=-1;
        int in2=-1;

        for(int i=nums.length-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1]){
            in1=i;
            break;
        }
        }
        if(in1==-1)
        reverse(nums,0);

        else{
            for(int i=nums.length-1;i>=0;i--)
            {
                if(nums[i]>nums[in1]){
                    in2=i;
                    break;
                }
            }
            swap(nums,in1,in2);
            reverse(nums,in1+1);
        }
    }
        void swap(int[] nums,int i,int j)
        {
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
        }

        void reverse(int[] nums,int start){
            int i=start;
            int j=nums.length-1;
            while(i<j)
            {
                swap(nums,i,j);
                i++;
                j--;
            }
         }
}
====================================================================================================================================================================
DAY 4
class Solution {
    public int countNegatives(int[][] grid) {
         int count = 0, row = 0, col = grid[0].length -1;
        while(col >= 0 && row < grid.length){
            if(grid[row][col] < 0){
                count += grid.length - row;
                col--;
            }else{
                row++;
            }
        }
        return count;
    }
}
==========================================================================================================================================================================
