DAY 1
=====================================================================================================================================================================
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.
======================
class Solution {
    public void setZeroes(int[][] arr) {
         int n = arr.length;
        int m = arr[0].length;

        int row[] = new int[n];
        int col[] = new int[m];

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if( arr[i][j] ==0 )
                {
                   row[i]=1;
                   col[j]=1;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if( row[i]==1 )
            {
                for (int j = 0; j < m; j++) {
                    arr[i][j] = 0;
                }
            }
        }

        for (int j = 0; j < m; j++) {
            if( col[j]==1 )
            {
                for (int i = 0; i < n; i++) {
                    arr[i][j] = 0 ;
                }
            }
        }
    }
}

====================================================================================================================================================================

DAY 2
===================

PASCALS TRIANGLE
===================

class Solution {
    public List<List<Integer>> generate(int numRows) {
        // public List<List<Integer>> generate(int r) {
        // List<List<Integer>> list1 = new ArrayList<>();
        // ArrayList<Integer> last = new ArrayList<>();
        // for (int i = 0 ; i < r ; i++){
        //     ArrayList<Integer> inside = new ArrayList<>();
        //     for(int j = 0 ; j<=i ; j++){
        //         if(j==0 || j==i){
        //             inside.add(j,1);
        //         }
        //         else{
        //             inside.add(j,last.get(j) + last.get(j-1));
        //         }
        //     }
        //     last = inside;
        //     list1.add(i,inside);
        // }
        // return list1;

        List<List<Integer>> res=new ArrayList<List<Integer>>();
        List<Integer> row,pre=null;
        for(int i=0;i<numRows;++i)
        {
            row=new ArrayList<Integer>();
            for(int j=0;j<=i;++j)
            {
                if(j==0 || j==i)
                {
                    row.add(1);
                }
                else{
                row.add(pre.get(j-1)+pre.get(j));
                }
            }
                pre=row;
                res.add(row);
            
        }
            return res;
        
    }
}
=====================================================================================================================================================================
DAY 3
======
next permutations

class Solution {
    public void nextPermutation(int[] nums) {
        int in1=-1;
        int in2=-1;

        for(int i=nums.length-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1]){
            in1=i;
            break;
        }
        }
        if(in1==-1)
        reverse(nums,0);

        else{
            for(int i=nums.length-1;i>=0;i--)
            {
                if(nums[i]>nums[in1]){
                    in2=i;
                    break;
                }
            }
            swap(nums,in1,in2);
            reverse(nums,in1+1);
        }
    }
        void swap(int[] nums,int i,int j)
        {
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
        }

        void reverse(int[] nums,int start){
            int i=start;
            int j=nums.length-1;
            while(i<j)
            {
                swap(nums,i,j);
                i++;
                j--;
            }
         }
}
====================================================================================================================================================================
DAY 4
======
KADANE ALGO
===========
class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int max = Integer.MIN_VALUE, sum = 0;
        
        for(int i=0;i<n;i++){
            sum += nums[i];
            max = Math.max(sum,max);
            
            if(sum<0) sum = 0;
        }
        
        return max;
    }
}
==========================================================
===========
sort 0,1,2
===========


class Solution {
    public void sortColors(int[] nums) {
        // Arrays.sort(nums);
         int low = 0, mid = 0, high = nums.length - 1;
        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums, low, mid);
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else {
                swap(nums, mid, high);
                high--;
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

================================================================================================================================================================================
DAY 5
======
stock buy and sell for maximum profit 
=====================================

public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}


my code 
========
public class Solution {
public int maxp(int p[]){
int minsofar=p[0],maxprofit =0;
for(int i=0;i<p.length;i++)
{
minsofar=Math.min(minsofar,p[i]);
int profit=p[i]-minsofar;
maxprofit =Math.max(maxprofit,profit);
}
return maxprofit;
}
}

=======================================================================================================================================================================

DAY 6
====
ROTATE THE MATRIX
=================

class Solution {
    public void rotate(int[][] matrix) {
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=i;j<matrix[0].length;j++)
            {
                int temp=0;
                temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;

            }
        }

        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix.length/2;j++)
            {
                int temp=0;
                temp=matrix[i][j];
                matrix[i][j]=matrix[i][matrix.length-1-j];
                matrix[i][matrix.length-1-j]=temp;
            }
        }
    }
}
=======================================================================================================================================================================

DAY 7
======
merge the overlapping intervals
===============================
class Solution {
   public int[][] merge(int[][] intervals) {
		int min = Integer.MAX_VALUE;
		int max = Integer.MIN_VALUE;
		
		for (int i = 0; i < intervals.length; i++) {
			min = Math.min(min, intervals[i][0]);
			max = Math.max(max, intervals[i][0]);
		}
		
		int[] range = new int[max - min + 1];
		for (int i = 0; i < intervals.length; i++) {
			range[intervals[i][0] - min] = Math.max(intervals[i][1] - min, range[intervals[i][0] - min]); 
		}
		
		int start = 0, end = 0;
		LinkedList<int[]> result = new LinkedList<>();
		for (int i = 0; i < range.length; i++) {
			if (range[i] == 0) {
				continue;
			}
			if (i <= end) {
				end = Math.max(range[i], end);
			} else {
				result.add(new int[] {start + min, end + min});
				start = i;
				end = range[i];
			}
		}
		result.add(new int[] {start + min, end + min});
		return result.toArray(new int[result.size()][]);
	}
}
=======================================================================================================================================================================
DAY 8
======
MAERGE TWO SORTED ARRAY WITHOUT EXTRA SPACE 
+==========================================
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
       int j=m-1;
       int i=n-1,k=nums1.length-1;
       while(i>=0)
       {
           if(j>=0 && nums1[j]>nums2[i])
           {
               nums1[k]=nums1[j];
               k--;
               j--;
           }

           else
           {
               nums1[k]=nums2[i];
               k--;
               i--;
           }
       }
    }
}
======================================================================================================================================================================

DAY 9
======

FIND THE DUPLICATE(ONLY ONE WOULD BE THERE) USING CONSTANT SPACE
class Solution {
    public int findDuplicate(int[] nums) {
      HashMap<Integer,Integer> map=new HashMap<>();
      int res=0;
      for(int i=0;i<nums.length;i++)
      {
         

         if(map.containsKey(nums[i])){
          res=nums[i];
          break;}
        else{
          map.put(nums[i],1);
          }
      
     
      }
            return res;
    }
    }
 ================================================================================================================================================================================
DAY 10
=========

SEARCH IN 2D MATRIX

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        return helper(matrix,target);
    }
    boolean helper(int[][] mat, int target) {
        int r=mat.length;
        int c=mat[0].length;
        int low=0;
        int high=r*c-1;
        while(low<=high){
            int mid=(low+high)/2;
            int j=mid%c;
            int i=(mid-j)/c;
            if(mat[i][j]==target) return true;
            else if(mat[i][j]>target) high=mid-1;
            else low=mid+1;
        }
        return false;
        
}
}
========================================================================================================================================================================
DAY !!
======
FIND THE MATRIX 

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0, maxElement = 0;
				for(int num: nums) {
					if(count == 0) {
						maxElement = num;
					}
					if(num == maxElement) {
						count++;
					} else {
						count--;
					}
				}

				return maxElement;
    }
    }
=====================================================================================================================================================================
DAY 12
=======

MAJORITY ELEMENT N/3
====================
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }else{
                map.put(nums[i],1);
            }
        }
        List<Integer> ans = new ArrayList<>();
        for(int k: map.keySet()){
            if(map.get(k)>nums.length/3){
                ans.add(k);
            }
        }
        return ans;
    }
}
========================================================================================================================================================================
UNIQ GRID PATHS
==================
class Solution {
    public int uniquePaths(int m, int n) {
      int[][] dp=new int[m+1][n+1];
      for(int[] arr:dp){
          Arrays.fill(arr,-1);
           }  
      return helper(m,n,dp);

    }
    static int helper(int m,int n,int[][] dp)
    {
        if(m==1 && n==1)
        return 1;
    if(dp[m][n]!=-1){
        return dp[m][n];
    }

    int count=0;
    if(m>=1){
        count+=helper(m-1,n,dp);

    }
    if(n>=1)
    count+=helper(m,n-1,dp);

return dp[m][n]=count;
}
}
=======================================================================================================================
 TWO SUM PROBLEM 
====================
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] a=new int[2];
        // int k=0;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=0;j<nums.length;j++)
            {
                if(((nums[i]+nums[j])==target))
                {
                    if(i==j)
                        continue;
                    a[0]=j;
                    a[1]=i;
                    break;
                }
            }
        }
        return a;
    }
}
==============================================================================================================================
longest consecutive sequence
==============================
class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        int count = 0;
        int temp = 1;
        if (nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return 1;
        }
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == (nums[i + 1] - 1)) {
                temp++;
                count = Math.max(count, temp);
            } else if (nums[i] == (nums[i + 1])) {
                count = Math.max(count, temp);
            } else {
                temp = 1;
                count = Math.max(count, temp);
            }
        }
        return count;
    }
}
============================================================================================================================
LARGEST SUBARRAY WITH 0 AS SUM 
===============================
INSTINCT : use hashmap with key 0 update value with largest length of the subarray

class GfG
{
    int maxLen(int arr[], int n)
    {
  int preFixSum = 0;
        
        int maxSubarrayLength = 0;
        
        
        Map<Integer, Integer> sumFrequency = new HashMap<>();
        
        for(int i = 0; i < n; i++) {
            preFixSum += arr[i];
            
            if(preFixSum == 0) {
                maxSubarrayLength = i + 1;
                continue;
            }
            
            if(!sumFrequency.containsKey(preFixSum)) {
                sumFrequency.put(preFixSum, i);
            } else {
                maxSubarrayLength = Math.max(maxSubarrayLength, (i - sumFrequency.get(preFixSum)));
            }
        }
        
        return maxSubarrayLength;
    }
}
======================================================================================================================
LONGEST SUBSTRING WITHOUT REPEATING CHARACTER
=============================================
class Solution {
    public int lengthOfLongestSubstring(String s) {
      ArrayList<Character> l=new ArrayList<>();
      int max=0;
        for(int i=0;i<s.length();i++)
     {
        int c=0;
        for(int j=i;j<s.length();j++)
         {
            if(l.contains(s.charAt(j)))
            {
             l.clear();                                                   /////IMPORTANT 
             break;
            }
            else
            {
              l.add(s.charAt(j));
              c++;
            }
            
        }
        if(c>max)
          max=c;
     }
     return max;
    }
}
=====================================================================================================================
FIND THE INTERSECTING POINT IN Y LINKED LIST
public class Solution {
    public ListNode getIntersectionNode(ListNode head1, ListNode head2) {
        while(head1!=null){
            ListNode temp=head2;
            while(temp!=null)
            {
                if(temp==head1)
                return head1;
                temp=temp.next;
            }
            head1=head1.next;
        }
        return null;
    }
}
======================================================================================================================
DETECT CYCLE IN THE LINKEST LIST
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow)
            return true;
        }
        return false;
    }
}
=========================================================================================================================
FIND THE STARTING POINT OF LL WHERE THE CYCLE IS CONNECTED 
=====================================================
public class Solution {
  public ListNode detectCycle(ListNode head) {
    // Initialize two pointers, slow and fast, to the head of the linked list.
    ListNode slow = head;
    ListNode fast = head;

    // Move the slow pointer one step and the fast pointer two steps at a time through the linked list,
    // until they either meet or the fast pointer reaches the end of the list.
    while (fast != null && fast.next != null) {
      slow = slow.next;
      fast = fast.next.next;
      if (slow == fast) {
        // If the pointers meet, there is a cycle in the linked list.
        // Reset the slow pointer to the head of the linked list, and move both pointers one step at a time
        // until they meet again. The node where they meet is the starting point of the cycle.
        slow = head;
        while (slow != fast) {
          slow = slow.next;
          fast = fast.next;
        }
        return slow;
      }
    }

    // If the fast pointer reaches the end of the list without meeting the slow pointer,
    // there is no cycle in the linked list. Return null.
    return null;
  }
}
======================================================================================================================
ROTATE THE ARRAY
================
* move pointers and swap the elements
* DEQUE usage 
===
import java.util.ArrayDeque;
import java.util.Deque;

public class Main {
	public static void main(String[] args) {
		int[] inp = {1, 2, 3, 4, 5, 6, 7};
		int d = 2;

		Deque<Integer> deq = new ArrayDeque<>();
		for (int i : inp) {
			deq.add(i);
		}

		for (int i = 0; i < d; i++) {
			int temp = deq.remove();
			deq.addLast(temp);
		}

		System.out.println(deq);
	}
}
// this code is contributed by devendrasalunke
===================================================================================================================
REMOVE DUPLICATES FROM SORTED ARRAY
====================================
class Solution {
   
    public int removeDuplicates(int[] nums) {
        int j = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    
    }
}
=====================================================================================================================
MAXIMUM NUMBER OF CONSEQUTIVE 1S
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int res=0,count=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==1)
            count ++;
            if(nums[i]==0)
            {
                res=Math.max(count,res);
                count=0;
            }
             res=Math.max(count,res);
        }
        return res;
    }
}
